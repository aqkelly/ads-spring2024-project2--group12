data = read.csv("DOF__Cooperative_Comparable_Rental_Income__Citywide_.csv")
View(data)
set(data$Building.Classification)
list(data$Building.Classification)
unique(unlist(list(data$Building.Classification)))
View(data)
unique(unlist(list(data$Neighborhood)))
unique(unlist(list(data$Building.Classification)))
data = read.csv("DOF__Cooperative_Comparable_Rental_Income__Citywide_.csv")
unique(unlist(list(data$Building.Classification)))
unique(unlist(list(data$Neighborhood)))
data = read.csv("DOF__Cooperative_Comparable_Rental_Income__Citywide_.csv")
View(data)
unique(unlist(list(data$Building.Classification)))
unique(unlist(list(data$Neighborhood)))
View(data)
data = read.csv("DOF__Cooperative_Comparable_Rental_Income__Citywide_.csv")
data = data[, 1:14]
View(data)
data = read.csv("DOF__Cooperative_Comparable_Rental_Income__Citywide_.csv")
data = data[, 1:15]
View(data)
data = read.csv("DOF__Cooperative_Comparable_Rental_Income__Citywide_.csv")
data = data[, 1:14]
install.packages("shiny")
install.packages("ggmap")
install.packages("choroplethrZip")
install.packages("devtools")
install.packages("choroplethr")
install.packages("devtools")
install.packages("ggmap")
install.packages("choroplethrZip")
install.packages("choroplethrMaps")
install.packages("devtools")
devtools::install_github("arilamstein/choroplethrZip")
install.packages("choroplethrZip")
x    <- faithful[, 2]
faithful[, 2]
faithful[, 2]
return(1\(2*pi) * exp(-1/2 * (x1^2 + (x2 + 0.6)^2)))
p_2 = function(x1, x2){
return(1\(2*pi) * exp(-1/2 * ((x1 + 0.45)^2 + (x2 + 0.35)^2)))
return(1/(2*pi) * exp(-1/2 * (x1^2 + (x2 + 0.6)^2)))
p_1 = function(x1, x2){
return(1/(2*pi) * exp(-1/2 * (x1^2 + (x2 + 0.6)^2)))
}
p_2 = function(x1, x2){
return(1/(2*pi) * exp(-1/2 * ((x1 + 0.45)^2 + (x2 + 0.35)^2)))
}
c(fx(-1, 0.7), fx(1, -1.9), fx(-0.7, 0.6), fx(-0.2, -1.5))
p2 = 1/(2*pi) * exp(-1/2 * ((x1 + 0.45)^2 + (x2 + 0.35)^2))
fx = function(x1, x2){
p1 = 1/(2*pi) * exp(-1/2 * (x1^2 + (x2 + 0.6)^2))
p2 = 1/(2*pi) * exp(-1/2 * ((x1 + 0.45)^2 + (x2 + 0.35)^2))
y = ifelse(p1 < p2, -1, 1)
return(y)
}
c(fx(-1, 0.7), fx(1, -1.9), fx(-0.7, 0.6), fx(-0.2, -1.5))
fx = function(x1, x2){
p1 = 1/(2*pi) * exp(-1/2 * (x1^2 + (x2 + 0.6)^2))
p2 = 1/(2*pi) * exp(-1/2 * ((x1 + 0.45)^2 + (x2 + 0.35)^2))
y = ifelse(p1 < p2, -1, 1)
return(y)
}
c(yhat_1 = fx(-1, 0.7), yhat_2 = fx(1, -1.9),
yhat_3 = fx(-0.7, 0.6), yhat_4 = fx(-0.2, -1.5))
fx = function(x1, x2){
p1 = 1/(2*pi) * exp(-1/2 * (x1^2 + (x2 + 0.6)^2)) * 1/4
p2 = 1/(2*pi) * exp(-1/2 * ((x1 + 0.45)^2 + (x2 + 0.35)^2)) * 1/4
y = ifelse(p1 < p2, -1, 1)
return(y)
}
c(yhat_1 = fx(-1, 0.7), yhat_2 = fx(1, -1.9),
yhat_3 = fx(-0.7, 0.6), yhat_4 = fx(-0.2, -1.5))
x1 = c(1, -1, 1); x2 = c(1, 1, -1.5); y = c(1, -1, 1)
library(plotly)
plot_ly(x = x1, y = x2, z = y)
data = data.frame(x1 = x1, x2 = x2, y = y)
View(data)
plot_ly(data, x = ~x1, y = ~x2, z = ~y)
install.packages("shiny")
shiny::runApp('Desktop/Columbia/Spring 2024/GR5243/Shiny')
install.packages("dbplot")
pip install csvs-to-sqlite
pip install csvs-to-sqlite
knitr::opts_chunk$set(echo = TRUE)
rank1 = c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4)
rank2 = c(2, 3, 4, 1, 3, 4, 1, 2, 4, 1, 2, 3)
T1 = rank1 + rank2
T1
library(knitr)
rank1 = c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4)
rank2 = c(2, 3, 4, 1, 3, 4, 1, 2, 4, 1, 2, 3)
T1 = c(3, 4, 5, 6, 7)
probability = c(2, 2, 4, 2, 2) / 12
kable(data.frame(T_1 = T1, P = probability))
library(knitr)
rank1 = c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4)
rank2 = c(2, 3, 4, 1, 3, 4, 1, 2, 4, 1, 2, 3)
table1 = data.frame(rank_x1 = rank1, rank_x2 = rank2, T = rank1 + rank2)
T1 = c(3, 4, 5, 6, 7)
probability = c(2, 2, 4, 2, 2) / 12
table2 = data.frame(T_1 = T1, P = probability)
kable(table1)
kable(table2)
kable(data.frame(mean=mean(rank1+rank2), var = var(rank1 + rank2)))
rank1 = rep(1,7,6)
rank2 = c(2, 3, 4, 1, 3, 4, 1, 2, 4, 1, 2, 3)
table1 = data.frame(rank_x1 = rank1, rank_x2 = rank2, T = rank1 + rank2)
rank1
rank1 = rep(1:7,6)
rank2 = c(2, 3, 4, 1, 3, 4, 1, 2, 4, 1, 2, 3)
rank1
rank1 = rep(1:7,each = 6)
rank2 = c(2, 3, 4, 1, 3, 4, 1, 2, 4, 1, 2, 3)
rank1
rank = sample(1:7, 3, replace = FALSE)
install.packages("gtools")
library(gtools)
perms <- permutations(7, 3, v=1:7)
View(perms)
library(knitr)
library(gtools)
rank = permutations(4, 2, v=1:4)
T1 = c(3, 4, 5, 6, 7)
probability = c(2, 2, 4, 2, 2) / 12
table2 = data.frame(T_1 = T1, P = probability)
kable(rank)
kable(table2)
View(perms)
library(knitr)
library(gtools)
rank = permutations(4, 2, v=1:4)
table1 = data.frame(rank)
names(df) <- c("rank_x1", "rank_x2")
library(knitr)
library(gtools)
rank = permutations(4, 2, v=1:4)
table1 = data.frame(rank)
names(table1) <- c("rank_x1", "rank_x2")
T1 = c(3, 4, 5, 6, 7)
probability = c(2, 2, 4, 2, 2) / 12
table2 = data.frame(T_1 = T1, P = probability)
kable(table1)
kable(table2)
library(knitr)
library(gtools)
rank = permutations(4, 2, v=1:4)
table1 = data.frame(rank); table1$T1 = table1$rank_x1 + table1$rank_x2
library(knitr)
library(gtools)
rank = permutations(4, 2, v=1:4)
table1 = data.frame(rank)
table1$T1 = table1$rank_x1 + table1$rank_x2
table1$rank_x1 + table1$rank_x2
library(knitr)
library(gtools)
rank = permutations(4, 2, v=1:4)
table1 = data.frame(rank)
names(table1) <- c("rank_x1", "rank_x2")
table1$T1 = table1$rank_x1 + table1$rank_x2
T1 = c(3, 4, 5, 6, 7)
probability = c(2, 2, 4, 2, 2) / 12
table2 = data.frame(T_1 = T1, P = probability)
kable(table1)
kable(table2)
library(knitr)
library(gtools)
rank = permutations(4, 2, v=1:4)
table1 = data.frame(rank); names(table1) <- c("rank_x1", "rank_x2")
table1$T1 = table1$rank_x1 + table1$rank_x2
T1 = c(3, 4, 5, 6, 7); probability = c(2, 2, 4, 2, 2) / 12
table2 = data.frame(T_1 = T1, P = probability)
kable(table1); kable(table2)
library(gtools)
rank_ii <- permutations(7, 3, v=1:7)
table3 = data.frame(rank_ii); names(table3) <- c("rank_x1", "rank_x2", "rank_x3")
table3$T1 = table3$rank_x1 + table3$rank_x2 + table3$rank_x3
kable(table3)
count(table3$T1)
library(knitr)
library(gtools)
rank_i = permutations(4, 2, v=1:4)
table1 = data.frame(rank_i); names(table1) <- c("rank_x1", "rank_x2")
table1$T1 = table1$rank_x1 + table1$rank_x2
kable(table1)
kable(table(table1$T1))
library(knitr)
library(gtools)
rank_i = permutations(4, 2, v=1:4)
table1 = data.frame(rank_i); names(table1) <- c("rank_x1", "rank_x2")
table1$T1 = table1$rank_x1 + table1$rank_x2
kable(table1)
x = table(table1$T1)
library(knitr)
library(gtools)
rank_i = permutations(4, 2, v=1:4)
table1 = data.frame(rank_i); names(table1) <- c("rank_x1", "rank_x2")
table1$T1 = table1$rank_x1 + table1$rank_x2
kable(table1)
x = table(table1$T1)
x
library(knitr)
library(gtools)
rank_i = permutations(4, 2, v=1:4)
table1 = data.frame(rank_i); names(table1) <- c("rank_x1", "rank_x2")
table1$T1 = table1$rank_x1 + table1$rank_x2
kable(table1)
kable(table(table1$T1 / sum(table(table1$T1))))
library(knitr)
library(gtools)
rank_i = permutations(4, 2, v=1:4)
table1 = data.frame(rank_i); names(table1) <- c("rank_x1", "rank_x2")
table1$T1 = table1$rank_x1 + table1$rank_x2
kable(table1)
freq = table(table1$T1)
kable(freq / sum(freq))
library(knitr)
library(gtools)
rank_i = permutations(4, 2, v=1:4)
table1 = data.frame(rank_i); names(table1) = c("rank_x1", "rank_x2")
table1$T1 = table1$rank_x1 + table1$rank_x2
kable(table1)
freq = table(table1$T1); prob = freq / sum(freq)
prob_table = data.frame(prob); names(prob_table) = c("T_1", "prob")
kable(prob_table)
library(gtools)
rank_ii <- permutations(7, 3, v=1:7)
table2 = data.frame(rank_ii); names(table2) <- c("rank_x1", "rank_x2", "rank_x3")
table2$T1 = table2$rank_x1 + table2$rank_x2 + table2$rank_x3
kable(table2)
freq = table(table2$T1); prob = freq / sum(freq)
prob_table = data.frame(prob); names(prob_table) = c("T_1", "prob")
kable(prob_table)
library(knitr)
library(gtools)
rank_i = permutations(4, 2, v=1:4)
table1 = data.frame(rank_i); names(table1) = c("rank_x1", "rank_x2")
table1$T1 = table1$rank_x1 + table1$rank_x2
kable(table1)
freq = table(table1$T1); prob = freq / sum(freq)
prob_table = data.frame(prob); names(prob_table) = c("T_1", "prob")
kable(prob_table)
library(gtools)
rank_ii <- permutations(7, 3, v=1:7)
table2 = data.frame(rank_ii); names(table2) <- c("rank_x1", "rank_x2", "rank_x3")
table2$T1 = table2$rank_x1 + table2$rank_x2 + table2$rank_x3
freq = table(table2$T1); prob = freq / sum(freq)
prob_table = data.frame(prob); names(prob_table) = c("T_1", "prob")
kable(prob_table)
kable(data.frame(mean=mean(table1$T1), var = var(table1$T1)))
kable(data.frame(mean=mean(table2$T1), var = var(table2$T1)))
library(knitr)
library(gtools)
rank_i = permutations(4, 2, v=1:4)
table1 = data.frame(rank_i); names(table1) = c("rank_x1", "rank_x2")
table1$T1 = table1$rank_x1 + table1$rank_x2
kable(table1)
freq = table(table1$T1); prob = freq / sum(freq)
prob_table = data.frame(prob); names(prob_table) = c("T_1", "prob")
kable(t(prob_table))
library(gtools)
rank_ii <- permutations(7, 3, v=1:7)
table2 = data.frame(rank_ii); names(table2) <- c("rank_x1", "rank_x2", "rank_x3")
table2$T1 = table2$rank_x1 + table2$rank_x2 + table2$rank_x3
freq = table(table2$T1); prob = round(freq / sum(freq), 2)
prob_table = data.frame(prob); names(prob_table) = c("T_1", "prob")
kable(t(prob_table))
Group1 = c(1.9168, 3.5102, 3.4567, 2.7052, 1.3366,
2.7654, 2.9780, 2.8394, 2.1455, 1.7992)
Group2 = c(1.9168, 3.5102, 3.4567, 2.7052, 1.3366,
2.7654, 2.9780, 2.8394, 2.1455, 1.7992)
my_wilcoxon = function(data_1, data_2) {
}
c(Group1, Group2)
rank(c(Group1, Group2))
combine = c(Group1, Group2)
ranks = rank(combined)
combine = c(Group1, Group2)
ranks = rank(combine)
ranks[1,10]
combine = c(Group1, Group2)
ranks = rank(combine)
ranks[1:10]
ranks[10:]
combine = c(Group1, Group2)
ranks = rank(combine)
ranks[1:10]
ranks[11:20]
ranks
combine
Group1 = c(1.9168, 3.5102, 3.4567, 2.7052, 1.3366, 2.7654, 2.9780, 2.8394,
2.1455, 1.7992)
Group2 = c(2.9204, 3.1500, 3.3405, 2.7374, 4.0499, 3.8547, 4.1359, 4.0159,
3.4328, 2.0894, 3.7789, 4.2853, 2.8724, 3.0208, 3.1968)
my_wilcoxon = function(data_1, data_2) {
combine = c(data_1, data_2)
ranks = rank(combined)
ranks_list1 = ranks[1,10]
ranks_list2 = ranks[10:]
combine = c(Group1, Group2)
ranks = rank(combine)
ranks[1:10]
ranks[11:20]
ranks
combine
Group1 = c(1.9168, 3.5102, 3.4567, 2.7052, 1.3366,
2.7654, 2.9780, 2.8394, 2.1455, 1.7992)
Group2 = c(2.9204, 3.1500, 3.3405, 2.7374, 4.0499, 3.8547, 4.1359, 4.0159,
3.4328, 2.0894, 3.7789, 4.2853, 2.8724, 3.0208, 3.1968)
my_wilcoxon = function(data_1, data_2) {
combine = c(data_1, data_2)
ranks = rank(combined)
origin = c(rep("data_1", length(data_1)), rep("data_2", length(data_2)))
ranks_list1 = ranks[origin == "data_1"]
ranks_list2 = ranks[origin == "data_2"]
T1 = sum(ranks_list1)
return(T1)
}
my_wilcoxon(Group1, Group2)
Group1 = c(1.9168, 3.5102, 3.4567, 2.7052, 1.3366,
2.7654, 2.9780, 2.8394, 2.1455, 1.7992)
Group2 = c(2.9204, 3.1500, 3.3405, 2.7374, 4.0499, 3.8547, 4.1359, 4.0159,
3.4328, 2.0894, 3.7789, 4.2853, 2.8724, 3.0208, 3.1968)
my_wilcoxon = function(data_1, data_2) {
combine = c(data_1, data_2)
ranks = rank(combine)
origin = c(rep("data_1", length(data_1)), rep("data_2", length(data_2)))
ranks_list1 = ranks[origin == "data_1"]
ranks_list2 = ranks[origin == "data_2"]
T1 = sum(ranks_list1)
return(T1)
}
my_wilcoxon(Group1, Group2)
Group1 = c(1.9168, 3.5102, 3.4567, 2.7052, 1.3366,
2.7654, 2.9780, 2.8394, 2.1455, 1.7992)
Group2 = c(2.9204, 3.1500, 3.3405, 2.7374, 4.0499, 3.8547, 4.1359, 4.0159,
3.4328, 2.0894, 3.7789, 4.2853, 2.8724, 3.0208, 3.1968)
my_wilcoxon = function(data_1, data_2) {
combine = c(data_1, data_2)
ranks = rank(combine)
origin = c(rep("data_1", length(data_1)), rep("data_2", length(data_2)))
ranks_list1 = ranks[origin == "data_1"]
ranks_list2 = ranks[origin == "data_2"]
T1 = sum(ranks_list1)
return(T1)
}
my_wilcoxon(Group1, Group2)
wilcox.test(Group1,Group2)
Group1 = c(1.9168, 3.5102, 3.4567, 2.7052, 1.3366,
2.7654, 2.9780, 2.8394, 2.1455, 1.7992)
Group2 = c(2.9204, 3.1500, 3.3405, 2.7374, 4.0499, 3.8547, 4.1359, 4.0159,
3.4328, 2.0894, 3.7789, 4.2853, 2.8724, 3.0208, 3.1968)
my_wilcoxon = function(data_1, data_2) {
combine = c(data_1, data_2)
ranks = rank(combine)
origin = c(rep("data_1", length(data_1)), rep("data_2", length(data_2)))
ranks_list1 = ranks[origin == "data_1"]
ranks_list2 = ranks[origin == "data_2"]
T1 = sum(ranks_list1)
return(T1)
}
my_wilcoxon(Group1, Group2)
wilcox.test(Group1,Group2)
combine = c(Group1, Group2)
rank(combine)
combine
combine = c(Group1, Group2)
rank(combine)
rank(combine)[1:10]
combine
sum(rank(combine)[1:10])
Group1 = c(1.9168, 3.5102, 3.4567, 2.7052, 1.3366,
2.7654, 2.9780, 2.8394, 2.1455, 1.7992)
Group2 = c(2.9204, 3.1500, 3.3405, 2.7374, 4.0499, 3.8547, 4.1359, 4.0159,
3.4328, 2.0894, 3.7789, 4.2853, 2.8724, 3.0208, 3.1968)
my_wilcoxon = function(data_1, data_2) {
combine = c(data_1, data_2)
ranks = rank(combine)
origin = c(rep("data_1", length(data_1)), rep("data_2", length(data_2)))
ranks_list1 = ranks[origin == "data_1"]
ranks_list2 = ranks[origin == "data_2"]
T1 = sum(ranks_list1)
return(T1)
}
my_wilcoxon(Group1, Group2)
## We simulate Group1 and Group2 using standard normal, and using m = 50, n = 30
T_list = NULL
for (i in 1:10000) {
Group1 = rnorm(50); Group2 = rnorm(30)
T_list[i] = my_wilcoxon(Group1, Group2)
}
## We simulate Group1 and Group2 using standard normal, and using m = 50, n = 30
T_list = NULL
for (i in 1:10000) {
Group1 = rnorm(50); Group2 = rnorm(30)
T_list[i] = my_wilcoxon(Group1, Group2)
}
hist(T_list)
## We simulate Group1 and Group2 using standard normal, and using m = 50, n = 30
T_list = NULL
for (i in 1:10000) {
Group1 = rnorm(50); Group2 = rnorm(30)
T_list[i] = my_wilcoxon(Group1, Group2)
}
hist(T_list, breaks = 20, xlim = c(1000,2500))
## We simulate Group1 and Group2 using standard normal, and using m = 50, n = 30
T_list = NULL
for (i in 1:10000) {
Group1 = rnorm(50); Group2 = rnorm(30)
T_list[i] = my_wilcoxon(Group1, Group2)
}
hist(T_list, breaks = 20, xlim = c(1500,2500))
## We simulate Group1 using standard normal and m = 50,
## Simulate Group2 using normal(0.3,1) and n = 30
n = 30
T_list = NULL
for (i in 1:10000) {
Group1 = rnorm(50); Group2 = rnorm(30, 0.3, 1)
T_list[i] = my_wilcoxon(Group1, Group2)
}
hist(T_list, breaks = 20, xlim = c(1500,2500))
## We simulate Group1 using standard normal and m = 50,
## Simulate Group2 using normal(0.5,1) and n = 30
n = 30
T_list = NULL
for (i in 1:10000) {
Group1 = rnorm(50); Group2 = rnorm(30, 0.5, 1)
T_list[i] = my_wilcoxon(Group1, Group2)
}
hist(T_list, breaks = 20, xlim = c(1500,2500))
## We simulate Group1 using standard normal and m = 50,
## Simulate Group2 using normal(1,1) and n = 30
n = 30
T_list = NULL
for (i in 1:10000) {
Group1 = rnorm(50); Group2 = rnorm(30, 1, 1)
T_list[i] = my_wilcoxon(Group1, Group2)
}
hist(T_list, breaks = 20, xlim = c(1500,2500))
## We simulate Group1 using standard normal and m = 50,
## Simulate Group2 using normal(1,1) and n = 30
n = 30
T_list = NULL
for (i in 1:10000) {
Group1 = rnorm(50); Group2 = rnorm(30, 1, 1)
T_list[i] = my_wilcoxon(Group1, Group2)
}
hist(T_list, breaks = 20)
## We simulate Group1 using standard normal and m = 50,
## Simulate Group2 using normal(0.5,1) and n = 30
n = 30
T_list = NULL
for (i in 1:10000) {
Group1 = rnorm(50); Group2 = rnorm(30, 0.5, 1)
T_list[i] = my_wilcoxon(Group1, Group2)
}
hist(T_list, breaks = 20)
## We simulate Group1 using standard normal and m = 50,
## Simulate Group2 using normal(0.5,1) and n = 30
n = 30
T_list = NULL
for (i in 1:10000) {
Group1 = rnorm(50); Group2 = rnorm(30, 0.5, 1)
T_list[i] = my_wilcoxon(Group1, Group2)
}
hist(T_list, breaks = 20, xlim = c(1300, 2400))
## We simulate Group1 using standard normal and m = 50,
## Simulate Group2 using normal(0.5,1) and n = 30
n = 30
T_list = NULL
for (i in 1:10000) {
Group1 = rnorm(50); Group2 = rnorm(30, 0.5, 1)
T_list[i] = my_wilcoxon(Group1, Group2)
}
hist(T_list, breaks = 20, xlim = c(1400, 2400))
shiny::runApp('Downloads')
install.packages("mapview")
shiny::runApp('Downloads')
runApp('Downloads')
runApp('Desktop/Columbia/Spring 2024/GR5243/project2-shinyapp-group12/app')
runApp('Desktop/Columbia/Spring 2024/GR5243/project2-shinyapp-group12/app')
runApp('Desktop/Columbia/Spring 2024/GR5243/project2-shinyapp-group12/app')
runApp('Desktop/Columbia/Spring 2024/GR5243/project2-shinyapp-group12/app')
runApp('Desktop/Columbia/Spring 2024/GR5243/project2-shinyapp-group12/app')
runApp('Desktop/Columbia/Spring 2024/GR5243/project2-shinyapp-group12/app')
runApp('Desktop/Columbia/Spring 2024/GR5243/project2-shinyapp-group12/app')
runApp('Desktop/Columbia/Spring 2024/GR5243/project2-shinyapp-group12/app')
runApp('Desktop/Columbia/Spring 2024/GR5243/project2-shinyapp-group12/app')
runApp('Desktop/Columbia/Spring 2024/GR5243/project2-shinyapp-group12/app')
runApp('Desktop/Columbia/Spring 2024/GR5243/project2-shinyapp-group12/app')
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp('~/Desktop/app_map.R')
runApp()
runApp()
runApp()
runApp('~/Desktop/app_map.R')
runApp('app_map-copy.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp('app1.R')
